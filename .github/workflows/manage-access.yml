name: Manage GitHub Access Based on Subscription Plan

on:
  repository_dispatch:
    types: [webhook_event]

jobs:
  manage-access:
    runs-on: ubuntu-latest

    steps:
      - name: Determine Event Type and Manage Access
        env:
          EMAIL: "${{ github.event.client_payload.github_email }}"
          EVENT_TYPE: "${{ github.event.client_payload.event_action }}"
          LINE_ITEMS_JSON: "${{ toJson(github.event.client_payload.line_items) }}"
        run: |
          echo "User email: $EMAIL"
          echo "Event type: $EVENT_TYPE"

          # Check if LINE_ITEMS_JSON is populated correctly
          if [ -z "$LINE_ITEMS_JSON" ]; then
            echo "Error: LINE_ITEMS_JSON is empty"
            exit 1
          else
            echo "Line items JSON: $LINE_ITEMS_JSON"
          fi

          # Validate JSON structure before processing
          if echo "$LINE_ITEMS_JSON" | jq empty; then
            echo "JSON structure is valid."
          else
            echo "Error: Invalid JSON structure in LINE_ITEMS_JSON"
            exit 1
          fi

          # Decode each line item safely by processing JSON from the payload directly
          echo "$LINE_ITEMS_JSON" | jq -c '.[]' | while read -r ITEM; do
            ITEM_NAME=$(echo "$ITEM" | jq -r '.name')
            echo "Processing item: $ITEM_NAME"

            if [[ "$EVENT_TYPE" == "subscription.created" || "$EVENT_TYPE" == "subscription.renewed" ]]; then
              if [[ "$ITEM_NAME" == "Basic Module" ]]; then
                echo "Granting access to basic repositories..."
                curl -X PUT -H "Authorization: token ${{ secrets.ORG_ACCESS_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/orgs/SaaSBerryIO/invitations \
                  -d "{\"email\": \"$EMAIL\", \"repositories\": [\"web-framework\"]}"
              elif [[ "$ITEM_NAME" == "Premium Module" ]]; then
                echo "Granting access to premium repositories..."
                curl -X PUT -H "Authorization: token ${{ secrets.ORG_ACCESS_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/orgs/SaaSBerryIO/invitations \
                  -d "{\"email\": \"$EMAIL\", \"repositories\": [\"premium-repo\"]}"
              elif [[ "$ITEM_NAME" == "Advanced Module" ]]; then
                echo "Granting access to advanced repositories..."
                curl -X PUT -H "Authorization: token ${{ secrets.ORG_ACCESS_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/orgs/SaaSBerryIO/invitations \
                  -d "{\"email\": \"$EMAIL\", \"repositories\": [\"advanced-repo\"]}"
              else
                echo "Unknown subscription item: $ITEM_NAME"
              fi
            elif [[ "$EVENT_TYPE" == "subscription.cancelled" ]]; then
              echo "Revoking access due to subscription cancellation..."

              if [[ "$ITEM_NAME" == "Basic Module" ]]; then
                echo "Revoking access to basic repositories..."
                curl -X DELETE -H "Authorization: token ${{ secrets.ORG_ACCESS_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/orgs/SaaSBerryIO/memberships/${{ github.event.client_payload.username }}
              elif [[ "$ITEM_NAME" == "Premium Module" ]]; then
                echo "Revoking access to premium repositories..."
                curl -X DELETE -H "Authorization: token ${{ secrets.ORG_ACCESS_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/orgs/SaaSBerryIO/memberships/${{ github.event.client_payload.username }}
              elif [[ "$ITEM_NAME" == "Advanced Module" ]]; then
                echo "Revoking access to advanced repositories..."
                curl -X DELETE -H "Authorization: token ${{ secrets.ORG_ACCESS_TOKEN }}" \
                  -H "Accept: application/vnd.github.v3+json" \
                  https://api.github.com/orgs/SaaSBerryIO/memberships/${{ github.event.client_payload.username }}
              else
                echo "Unknown subscription item for revocation: $ITEM_NAME"
              fi
            else
              echo "Unhandled event type: $EVENT_TYPE"
              exit 1
            fi
          done
